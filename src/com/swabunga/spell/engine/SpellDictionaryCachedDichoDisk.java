package com.swabunga.spell.engine;import java.io.*;import java.util.*;/** * Yet another <code>SpellDictionary</code> this one is based on Damien Guillaume's * Diskbased dictionary but adds a cache to try to improve abit on performance. * * @author Robert Gustavsson * @version 0.01 */public class SpellDictionaryCachedDichoDisk extends SpellDictionaryDichoDisk {        // Only used for testing to measure the effectiveness of the cache.    static public int hits=0;    static public int codes=0;    private static int  MAX_CACHED=10000;    private HashMap     suggestionCache=new HashMap(MAX_CACHED);    private LinkedList  codeRefQueue=new LinkedList();    /**     * Dictionary Convienence Constructor.     */    public SpellDictionaryCachedDichoDisk(File wordList)                                     throws FileNotFoundException, IOException {        super((File) wordList);    }        /**     * Dictionary Convienence Constructor.     */    public SpellDictionaryCachedDichoDisk(File wordList, String encoding)                                     throws FileNotFoundException, IOException {        super(wordList, encoding);    }    /**     * Dictionary constructor that uses an aspell phonetic file to     * build the transformation table.     */    public SpellDictionaryCachedDichoDisk(File wordList, File phonetic)                                     throws FileNotFoundException, IOException {        super(wordList, phonetic);    }    /**     * Dictionary constructor that uses an aspell phonetic file to     * build the transformation table.     */    public SpellDictionaryCachedDichoDisk(File wordList, File phonetic, String encoding)                                     throws FileNotFoundException, IOException {        super(wordList, phonetic, encoding);    }    /**     * Add a word permanantly to the dictionary (and the dictionary file).     * <i>not implemented !</i>     */    public void addWord(String word) {        System.err.println("error: addWord is not implemented for SpellDictionaryDichoDisk");    }    /**     * Clears the cache.     */    public void clearCache(){        suggestionCache.clear();        codeRefQueue.clear();    }    /**     * Returns a list of strings (words) for the code.     */    public List getWords(String code) {        List list;        codes++;        if(suggestionCache.containsKey(code)){            hits++;            return getCachedList(code);        }        list=super.getWords(code);        addToCache(code,list);                return list;    }    /**     * This method returns the cached suggestionlist and also moves the code to     * the top of the codeRefQueue to indicate this code has resentlly been     * referenced.     */    private List getCachedList(String code){        codeRefQueue.remove(code);        codeRefQueue.addFirst(code);        return (List)suggestionCache.get(code);    }    /**     * Adds a code and it's suggestion list to the cache.     */    private void addToCache(String code, List l){        String c;        if(suggestionCache.size()>=MAX_CACHED){            c=(String)codeRefQueue.getLast();            suggestionCache.remove(c);            codeRefQueue.removeLast();        }                suggestionCache.put(code,l);        codeRefQueue.addFirst(code);    }}